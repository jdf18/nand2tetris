// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array powersOfTwo;

    /** Initializes the library. */
    function void init() {
        var int n;
        let n = 1;
        let powersOfTwo = Array.new(16);
        let powersOfTwo[0] = 1;
        while (n < 16) {
            let powersOfTwo[n] = powersOfTwo[n-1] + powersOfTwo[n-1];
            let n = n + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        
        
        var int n, result;
        var bool negative;
        
        if (x = 0 | y = 0) {
            return 0;
        }

        let negative = false;
        if ( (x < 0 & y > 0) | (x > 0 & y < 0) ) {
            let negative = true;
        }
        if (x < 0) {
            let x = -x;
        }
        if (y < 0) {
            let y = -y;
        }
        
        let n = 0;
        let result = 0;

        while (n < 16) {
            if (~((y & powersOfTwo[n]) = 0)) {
                let result = result + x;
            }
            let x = x + x;
            let n = n + 1;
        }

        if (negative) {
            let result = -result;
        }

        return result;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;

        if (y = 0) {
            do Output.printString("Error: can not divide by 0");
            do Output.println();
            do Sys.error(1);
        }

        if (x < 0) {
            if (y < 0) {
                return Math.divide(-x, -y);
            } else {
                return -Math.divide(-x, y);
            }
        } else {
            if (y < 0) {
                return -Math.divide(x, -y);
            }
        }

        if (y > x) {
            return 0;
        }

        let q = Math.divide(x, y + y);
        if (x - ((q+q) * y) < y) {
            return 2 * q;
        } else {
            return 2 * q + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, n;

        let y = 0;
        let n = 7;

        if (x < 0) {
            do Output.printString("Error: x is negative");
            do Output.println();
            do Sys.error(2);
        }

        if (x = 0) {
            return 0;
        }

        while ((n + 1) > 0) {
            if (((y + powersOfTwo[n]) < 182) & (((y + powersOfTwo[n]) * (y + powersOfTwo[n])) - 1 < x)) {
                let y = y + powersOfTwo[n];
            }
            let n = n - 1;
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a < b) {
            return b;
        } else {
            return a;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }
}
