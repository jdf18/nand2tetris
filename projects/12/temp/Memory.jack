// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {

    static int MEMORY, HEAP;
    /** Initializes the class. */
    function void init() {
        let MEMORY = 0;
        let HEAP = 2048;
        let HEAP[0] = -1;
        let HEAP[1] = 16284 - 2048 - 2;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return MEMORY[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let MEMORY[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int currentAdd, selectAdd, block, currentSize, selectSize;

        if (~(size > 0)) {
            do Output.printString("Error: size must be greater than 0");
            do Output.println();
            do Sys.error(3);
        }

        let currentAdd = HEAP;
        let currentSize = currentAdd[1];
        let selectAdd = -1;
        let selectSize = currentAdd[1] + 1;

        while (~(currentAdd = -1)) { 
            if (~(currentSize < (size + 2))) {
                if (currentSize < selectSize) {
                    let selectAdd = currentAdd;
                    let selectSize = currentSize;
                }
            }
            let currentAdd = currentAdd[0];
            if (~(currentAdd = -1)) {
                let currentSize = currentAdd[1];
            }
        }

        if (selectAdd = -1) {
            do Output.printString("Error: Unable to allocate a new segment");
            do Output.println();
            do Sys.error(4);
        }

        let selectAdd[1] = selectAdd[1] - size - 2;
        let block = selectAdd + selectAdd[1] + 2;
        let block[-2] = -1;
        let block[-1] = size;
        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int currentAdd, block;
        let block = o- 2;
        let currentAdd = HEAP;
        while (~(currentAdd[0] = -1)) {
            let currentAdd = currentAdd[0];
        }
        let currentAdd[0] = block;
        return;
    }    
}
