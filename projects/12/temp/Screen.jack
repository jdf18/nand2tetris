// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static int SCREEN;
    static bool COLOR;

    /** Initializes the Screen. */
    function void init() {
        let SCREEN = 16384;
        let COLOR = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int pointer;
        let pointer = SCREEN;

        while (pointer < 24576) {
            do Memory.poke(pointer, 0);
            let pointer = pointer + 1;
        }        

        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let COLOR = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, bit, mask;

        if (x < 0 | y < 0 | x > 511 | y > 255) {
            /** do Output.printString("Pixel out of bounds");
            do Output.println();
            do Sys.error(5); */
            return;
        }

        let mask = 1;
        let bit = x - ((x/16) * 16);
        while (bit > 0) {
            let mask = mask + mask;
            let bit = bit - 1;
        }

        let address = SCREEN + (32 * y) + (x / 16);
        let bit = Memory.peek(address);

        if (COLOR = true) {
            let bit = bit | mask;
        } else {
            let mask = ~mask;
            let bit = bit & mask;
        }

        do Memory.poke(address, bit);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, diff, stepx, stepy;

        if (x1 < 0 | x2 < 0 | y1 < 0 | y2 < 0 | x1 > 511 | x2 > 511 | y1 > 255 | y2 > 255) {
            do Output.printString("error: coords out of bounds");
            do Ouptut.println();
            do Sys.error(6);
        }

        let dx = x2 - x1;
        let dy = y2 - y1;

        if (dx = 0) {
            if (dy = 0) {
                do Screen.drawPixel(x1, y1);
                return;
            } else {
                let diff = 0;
                while (diff < Math.abs(dy)) {
                    do Screen.drawPixel(x1, Math.min(y1, y2) + diff);
                    let diff = diff + 1;
                }
                return;
            }
        } else {
            if (dy = 0) {
                let diff = 0;
                while (diff < Math.abs(dx)) {
                    do Screen.drawPixel(Math.min(x1, x2) + diff, y1);
                    let diff = diff + 1;
                }
                return;
            }
        }

        let diff = 0;
        if (dx > 0) {
            let stepx = 1;
        } else {
            let stepx = -1;
        }
        if (dy > 0) {
            let stepy = 1;
        } else {
            let stepy = -1;
        }

        while (~(x1 = x2 & y1 = y2)) {
            do Screen.drawPixel(x1, y1);
            if (diff < 0) {
                let x1 = x1 + stepx;
                let diff = diff + Math.abs(dy);
            } else {
                let y1 = y1 + stepy;
                let diff = diff - Math.abs(dx);
            }
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int init;
        if (x1 > x2) {
            let x1 = x1 + x2;
            let x2 = x1 - x2;
            let x1 = x1 - x2;
        }
        if (y1 > y2) {
            let y1 = y1 + y2;
            let y2 = y1 - y2;
            let y1 = y1 - y2;
        }

        if (x1 < 0 | x2 < 0 | y1 < 0 | y2 < 0 | x1 > 511 | x2 > 511 | y1 > 255 | y2 > 255) {
            do Output.printString("error: coords out of bounds");
            do Ouptut.println();
            do Sys.error(7);
        }

        let init = x1;
        while (~(y1 > y2)) {
            let x1 = init;
            while (~(x1 > x2)) {
                do Screen.drawPixel(x1, y1);
                let x1 = x1 + 1;
            }
            let y1 = y1 + 1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, len, t;

        if (x < 0 | y < 0 | x > 511 | y > 255) {
            do Output.printString("error: coords out of bounds");
            do Ouptut.println();
            do Sys.error(7);
        }

        if (r > 181) {
            do Output.printString("error: radius out of bounds");
            do Ouptut.println();
            do Sys.error(7);
        }

        let t = 0;
        while (t < r) {
            do Screen.drawPixel(x - t, y);
            do Screen.drawPixel(x + t, y);
            let t = t + 1;
        }

        let dy = 1;
        while (~(dy > r)) {
            let len = Math.sqrt( (r * r) - (dy * dy));
            let t = 0;
            while (t < len) {
                do Screen.drawPixel(x - t, y + dy);
                do Screen.drawPixel(x + t, y + dy);
                do Screen.drawPixel(x - t, y - dy);
                do Screen.drawPixel(x + t, y - dy);
                let t = t + 1;
            }
            let dy = dy + 1;
        }

        return;
    }
}
