// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int maximumLength, currentLength;
    field Array str;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 0) {
            do Output.printString("error: string length can not be negative");
            do Output.println();
            do Sys.error(8);
        }

        let maximumLength = maxLength;
        if (maxLength > 0) {
            let str = Array.new(maxLength);
        }
        let currentLength = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return currentLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j + 1) > maximumLength) {
            do Output.printString("error: string index out of range");
            do Output.println();
            do Sys.error(9);
        }

        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j + 1) > maximumLength) {
            do Output.printString("error: string index out of range");
            do Output.println();
            do Sys.error(9);
        }

        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (currentLength = maximumLength) {
            do Output.printString("error: string already full");
            do Output.println();
            do Sys.error(10);
        }

        let str[currentLength] = c;
        let currentLength = currentLength + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (currentLength = 0) {
            do Output.printString("error: string has no characters");
            do Output.println();
            do Sys.error(11);
        }

        let currentLength = currentLength - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int result, pointer, sign;

        let result = 0;
        let pointer = 0;
        let sign = 1;

        while (pointer < currentLength) {
            if (pointer = 0) {
                if (str[pointer] = 45) {
                    let sign = -1;
                } else {
                    if ((str[pointer] > 47) & (str[pointer] < 58)) {
                        let result = (10 * result) + str[pointer] - 48;
                    } else {
                        return result * sign;
                    }
                }
            } else {
                if ((str[pointer] > 47) & (str[pointer] < 58)) {
                    let result = (10 * result) + str[pointer] - 48;
                } else {
                    return result * sign;
                }
            }
            let pointer = pointer + 1;
        }
        return result * sign;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int mod, i;
        var Array temp;
        let currentLength = 0;

        let temp = Array.new(6);
        let i = 0;

        if (val < 0) {
            do appendChar(45);
            let val = -val;
        }

        while (~(val/10 = 0)) {
            if (val < 10) {
                // do appendChar(val + 48);
                let temp[i] = val + 48;
                let i = i + 1;
                
            } else {
                let mod = val / 10;
                // do appendChar(48 + val - (mod * 10));
                let temp[i] = 48 + val - (mod * 10);
                let i = i + 1;
                let val = mod;
            }
        }
        if ((val < 10) & (val > 0)) {
            // do appendChar(val + 48);
            let temp[i] = val + 48;
            let i = i + 1;
        }
        let i = i - 1;
        while (~(i = -1)) {
            do appendChar(temp[i]);
            let i = i - 1;
        }
        do temp.dispose();
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
