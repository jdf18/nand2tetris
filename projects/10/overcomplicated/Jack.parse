# Terminals

keyword: 'class' | 'constructor' | 'function' | 'method' | 'field' | 'static' | 'var' | 'int' | 'char' | 'boolean' | 'void' | 'true' | 'false' | 'null' | 'this' | 'let' | 'do' | 'if' | 'else' | 'while' | 'return' ;
symbol: '{' | '}' | '(' | ')' | '[' | ']' | '.' | ',' | ';' | '+' | '-' | '*' | '/' | '&' | '|' | '<' | '>' | '=' | '~' ;
integerConstant: r'[0-9]+' ;
stringConstant: r'"[^"\n]+"' ;
identifier: r'[a-zA-Z_][a-zA-Z0-9_]*' ;


# NonTerminals

class: 'class' className '{' classVariableDeclaration* subroutineDeclaration* '}' ;
classVariableDeclaration: ( 'static' | 'field' ) type variableName ( ',' variableName )* ';' ;
type: 'int' | 'char' | 'boolean' | className ;
subroutineDeclaration: ( 'constructor' | 'function' | 'method' ) ( 'void' | type ) subroutineName '(' parameterList ')' subroutineBody ;
parameterList: ( ( type variableName ) ( ',' type variableName )* )? ;
subroutineBody: '{' variableDeclaration* statements '}' ;
variableDeclaration: 'var' type variableName ( ',' variableName )* ';' ;
className: identifier ;
subroutineName: identifier ;
variableName: identifier ;

statements: statement* ;
statement: letStatement | ifStatement | whileStatement | doStatement | returnStatement ;
letStatement: 'let' variableName ( '[' expression ']' )? '=' expression ';' ;
ifStatement: 'if' '(' expression ')' '{' statements '}' ( 'else' '{' statements '}' )? ;
whileStatement: 'while' '(' expression ')' '{' statements '}' ;
doStatement: 'do' subroutineCall ';' ;
returnStatement: 'return' expression? ';' ;

expression: term (op term)* ;
term: integerConstant | stringConstant | keywordConstant | variableName | variableName '[' expression ']' | subroutineCall | '(' expression ')' | unaryOp term ;
subroutineCall: subroutineName '(' expressionList ')' | ( className | variableName ) '.' subroutineName '(' expressionList ')' ;
expressionList: (expression ( ',' expression)* )? ;
op: '+' | '-' | '*' | '/' | '&' | '|' | '<' | '>' | '=' ;
unaryOp: '-' | '~' ;
keywordConstant: 'true' | 'false' | 'null' | 'this'  ;
